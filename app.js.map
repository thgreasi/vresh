{"version":3,"names":[],"mappings":"","sources":["app.js"],"sourcesContent":["import localforage from 'localforage';\n\nimport { app, loadedPromise } from './appCore';\nimport { init as appThemeInit } from './appTheme';\n\nimport { WeatherService } from './Services/WeatherServiceMock';\nimport CityWeatherDetails from './Model/CityWeatherDetails';\n\n\nappThemeInit();\n\n// localforage.config({\n//   name: 'Vresh'\n// });\n\napp.WeatherService = WeatherService;\napp.localforage = localforage;\napp.CityWeatherDetails = CityWeatherDetails;\n\napp.cities = [];\n\n\napp.displayInstalledToast = function() {\n  // Check to make sure caching is actually enabledâ€”it won't be in the dev environment.\n  if (!Polymer.dom(document).querySelector('platinum-sw-cache').disabled) {\n    Polymer.dom(document).querySelector('#caching-complete').show();\n  }\n};\n\n// Scroll page to top and expand header\napp.scrollPageToTop = function() {\n  app.$.headerPanelMain.scrollToTop(true);\n};\n\napp.closeDrawer = function() {\n  app.$.paperDrawerPanel.closeDrawer();\n};\n\napp.reloadPage = function() {\n  if (app.crntPageElement && typeof app.crntPageElement.refresh === 'function') {\n    app.crntPageElement.refresh();\n  }\n};\n\nvar citiesOnLoadPromise = localforage.getItem('data.cities').then(cities => {\n    if (!Array.isArray(cities)) {\n      cities = [];\n    }\n\n    cities = cities.map(repo => Object.assign(new CityWeatherDetails(), repo));\n\n    console.log('LOADED!', cities);\n    return cities;\n}).catch(() => []);\n\nloadedPromise.then(() => {\n  console.log('loadedPromise');\n  return citiesOnLoadPromise.then(cities => {\n    // app.$.datacitiesStorage.set('autoSaveDisabled', false);\n    app.set('cities', cities);\n    console.log('SET cities', cities);\n\n    if (cities.length) {\n      setTimeout(() => {\n        app.route = 'citiesitories';\n        app.reloadPage();\n      }, 0);\n    }\n  });\n\n  // return getUserAndOrgcities('thgreasi');\n\n});\n\nfunction getUserAndOrgcities(username) {\n  var usercitiesPromise = GithubService.getUsercities(username);\n  var orgsPromise = GithubService.getUserOrgs(username);\n\n  var overallPromises = [processRepoInfosPromise(usercitiesPromise)];\n\n  overallPromises.push(orgsPromise.then(orgs => {\n    return Promise.all(orgs.map(o => processRepoInfosPromise(GithubService.getUsercities(o.login))));\n  }));\n\n  return Promise.all([overallPromises]);\n}\n\n\nfunction processRepoInfos (cities) {\n  cities.forEach((repo) => {\n    repo.setStargazers(repo.stargazers_count);\n    repo.setDownloads(repo.downloads);\n  });\n  \n  if (cities.length) {\n    app.cities.push.apply(app.cities, cities);\n    app.set('cities', app.cities.slice());\n  }\n\n  // let args = cities.slice();\n  // args.unshift('app.cities');\n  // console.log(args);\n  // app.push.apply(app, args);\n}\n\nfunction processRepoInfosPromise (citiesPromise) {\n  return citiesPromise.then(cities => processRepoInfos(cities));\n}\n"],"file":"app.js","sourceRoot":"/source/"}